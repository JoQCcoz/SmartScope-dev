"""
Django settings for autoscreenServer project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from django.core.files.storage import FileSystemStorage

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

AUTOSCREENDIR = os.getenv('AUTOSCREENDIR')
AUTOSCREENING_URL = '/autoscreening/'


SECRET_KEY = os.getenv('SECRET_KEY')

USE_STORAGE = eval(os.getenv('USE_STORAGE'))
USE_LONGTERMSTORAGE = eval(os.getenv('USE_LONGTERMSTORAGE'))
USE_AWS = eval(os.getenv('USE_AWS'))
USE_MICROSCOPE = eval(os.getenv('USE_MICROSCOPE'))


AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME')
AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
AWS_DATA_PREFIX = os.getenv('AWS_DATA_PREFIX')

WEIGHTS_DIR = os.path.join(os.getenv("APP"), 'Template_files', 'weights')

if USE_LONGTERMSTORAGE:
    AUTOSCREENSTORAGE = os.getenv('AUTOSCREENSTORAGE')
    AUTOSCREENINGSTORAGE_URL = '/autoscreeningstorage/'
else:
    AUTOSCREENSTORAGE = None
    AUTOSCREENINGSTORAGE_URL = None

INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    # 'AutoscreenViewer',
    'storages',
    'Smartscope.settings.apps.Smartscope',
]

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('MYSQL_USERNAME'),
        'PASSWORD': os.getenv('MYSQL_ROOT_PASSWORD'),
        'HOST': os.getenv('MYSQL_HOST'),
        'PORT': os.getenv('MYSQL_PORT'),
    }
}

SMARTSCOPE = {
    'Finders': {
        'FFT finder': {
            'method': 'fft_method',
            'package': 'basic_finders'
        },
        'Binary finder': {
            'method': 'find_targets_binary',
            'package': 'basic_finders'
        },
        'Regular Pattern': {
            'method': 'regular_pattern',
            'package': 'basic_finders',
            'kwargs': dict(spacing=5)
        },
        'Square finder': {
            'method': 'find_squares',
            'package': 'basic_finders'
        },
        'AI Square finder': {
            'method': 'find_squares',
            'package': 'AIFinder.wrapper',
            'kwargs': dict(device='0', imgsz=2048, thresh=0.2, iou=0.5, weights=os.path.join(WEIGHTS_DIR, 'square_weights/best_square.pth'))
        },
        'AI Hole finder': {
            'method': 'find_holes',
            'package': 'AIFinder.wrapper',
            'kwargs': dict(imgsz=1280, thresh=0.7, iou=0.15, device='0', weights_circle=os.path.join(WEIGHTS_DIR, 'circle_weights/aug_27_yolo_circle_weights.pt'), method='yolo')
        },
        'AI Hole finder+classifier': {
            'method': 'find_and_classify_holes',
            'package': 'AIFinder.wrapper',
            'kwargs': dict(weights_circle=os.path.join(WEIGHTS_DIR, 'circle_weights/new_circle_yolo.pt'), weights_class=os.path.join(WEIGHTS_DIR, 'classifier_weights/resNet34_newlabel2.pth'), imgsz=1280, thresh=0.2, iou=0.3, device='0', method='yolo')
        }
    }
}

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'EST'

USE_I18N = True

USE_L10N = True

USE_TZ = True
